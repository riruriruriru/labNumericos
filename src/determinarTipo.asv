function [resultado] = determinarTipo(A, b)
%caracteristicas
%c1 = logical(definidaPositiva(matrix)) %def positiva
%c2 = logical(definidaSemiPositiva(matrix)) %semi positiva
%c3 = logical(definidaNegativa(matrix)) %negativa
%c4 = logical(simetrica(matrix)) %simetrica
%c5 = logical(dispersa(matrix)) %dispersa
%c6 = logical(diagonalDominante(matrix)) %diagonal dominante
[c1,c2,c3,c4,c5,c6] = determinarC(A);
tolerancia = 10^-15;
iteraciones = 1000;
%LU no cholesky: matrices cuadradas e inversa->determinante distinto de 0
%definida positiva y simetrica: cholesky
%diagonal dominante: gauss jacobi y gauss seidel
%metodos directos: matrices < a 300
%metodos iterativos (gauss seidel y jacobi): matrices grandes, > 300 y dispersas
%matrices cuadradas, grandes y no dispersas: QR
%metodo housholder: matriz simetrica
%metodo givens: matriz dispersa y cuadrada
[n,m] = size(A);
if n ~= m
    string = 'Matriz no es cuadrada, solo se puede resolver con método QR, Givens y Housholder';
    disp(string)
    return
else
    string = 'Matriz cuadrada';
    disp(string)
    if n>300
        string = 'Matriz se considera grande, se decidirá entre métodos iterativos: gauss seidel y gauss jacobi, además del método directo QR';
        disp(string)
        if c5 == 1 %matriz dispersa
            if c6 == 1%diagonal dominante
                %aplicar gauss seidel y jacobi
                string = 'Matriz tiene diagonal dominante. Se resolverá con método gauss seidel y gauss jacobi';
                disp(string)
            end
        else
            string = 'Se resolverá con método QR';
            disp(string)
            %APLICAR QR
        end
    else
        string = 'Matriz se considera pequeña, se decidirá entre métodos directos, excepto QR';
        disp(string)
        if c1 == 1 && c4 == 1 && c5 == 1
            string = 'Matriz simetrica, definida positiva y dispersa. Se resolverá con cholesky, givens y LU doolittle';
            disp(string)
            tic,
            [xCholesky,eCholesky,c1C,c2C]=cholesky(A, b)
            tiempoCholesky = toc
            tic,
            [xDoolittle,eDoolittle,c1D,c2D] = doolittle(A, b 
            tiempoDoolittle = toc
            tic,
            [xGivens,eGivens,c1G,c2G] = givens(A,b)
            tiempoGivens = toc
            graphDoolittleCholeskyGivens(xDoolittle, xCholesky, xGivens)
            graphErrorsDoolittleCholeskyGivens(eDoolittle, eCholesky,eGivens);
            time = [tiempoDoolittle, tiempoCholesky, tiempoGivens]
            graphTDoolittleCholeskyGivens(time);
            %aplicar 3 metodos
        elseif c4 == 1 && c1 ~= 1 && c5 == 1
            string = 'Matriz simetrica, dispersa y no definida positiva. Se resolverá con housholder, givens y LU doolittle';
            disp(string)
            %aplicar 3 metodos
        elseif c5 ==0 %matriz no dispersa
            %aplicar housholder
            string = 'Matriz no dispersa. Se resolverá con housholder';
            disp(string)
        
        elseif c4 == 1 && c1 == 1 %simetrica y definida positiva
            %aplicar cholesky
            string = 'Matriz simétrica y definida positiva. Se resolverá con cholesky';
            disp(string)
        
        elseif c5 == 1 %matriz dispersa
            string = 'Matriz dispersa. Se resolverá con givens y householder';
            disp(string)
            %aplicar givens
        else
            %no se cumplio ninguna especifica, se aplicara  doolittle
            string = 'No se cumplió ninguna condición específica. Se resolverá con LU doolittle';
            disp(string)
            %aplicar ambos
        end
        
            
    end
end
    

end